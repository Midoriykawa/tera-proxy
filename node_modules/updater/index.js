AV
	for(let file in manifest.data) {
		let hash = manifest.data[file]
		if(hash.hash) hash = hash.hash
		manifest.data[file] = Buffer.from(hash, 'hex').toString('base64')
	}
	return manifest
}

function diffNew(mFrom, mTo) {
	const res = []
	for(let file in mTo)
		if(mTo[file] !== mFrom[file]) res.push(file)
	return res
}

function diffDeleted(mFrom, mTo) {
	const res = []
	for(let file in mFrom)
		if(!mTo[file]) res.push(file)
	return res
}

async function ensureDirs(base, files) {
	const created = new Set()

	for(let file of files) {
		const dirs = file.split(/[\/\\]/)
		dirs.pop()
		for(let i = 1; i < dirs.length; i++) dirs[i] = dirs[i - 1] + path.sep + dirs[i]
		for(let dir of dirs)
			if(!created.has(dir)) {
				try {
					await callAsync(fs, 'mkdir', path.join(base, dir))
				}
				catch(e) { if(e.code !== 'EEXIST') throw e }

				created.add(dir)
			}
	}
}

async function getBody(res) {
	let data = await readStreamAsync(res)
	if(res.headers['content-encoding'] === 'gzip') data = await callAsync(zlib, 'gunzip', data)
	return data
}

function callAsync(lib, func, ...args) {
	return new Promise((resolve, reject) => {
		lib[func](...args, (err, rtn) => { err ? reject(err) : resolve(rtn) })
	})
}

function readStreamAsync(stream) {
	return new Promise((resolve, reject) => {
		const chunks = []
		stream
		.on('data', data => { chunks.push(data) })
		.on('end', () => { resolve(Buffer.concat(chunks)) })
		.on('error', reject)
	})
}

module.exports = Updater